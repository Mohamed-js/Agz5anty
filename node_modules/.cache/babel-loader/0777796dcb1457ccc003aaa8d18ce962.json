{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { Signal } from \"./Signal\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { TransportTimeClass } from \"../core/type/TransportTime\";\nimport { ToneConstantSource } from \"./ToneConstantSource\";\n/**\n * Adds the ability to synchronize the signal to the [[Transport]]\n */\n\nexport var SyncedSignal = /*#__PURE__*/function (_Signal) {\n  _inherits(SyncedSignal, _Signal);\n\n  var _super = _createSuper(SyncedSignal);\n\n  function SyncedSignal() {\n    var _this;\n\n    _classCallCheck(this, SyncedSignal);\n\n    _this = _super.call(this, optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]));\n    _this.name = \"SyncedSignal\";\n    /**\n     * Don't override when something is connected to the input\n     */\n\n    _this.override = false;\n    var options = optionsFromArguments(Signal.getDefaults(), arguments, [\"value\", \"units\"]);\n    _this._lastVal = options.value;\n    _this._synced = _this.context.transport.scheduleRepeat(_this._onTick.bind(_assertThisInitialized(_this)), \"1i\");\n    _this._syncedCallback = _this._anchorValue.bind(_assertThisInitialized(_this));\n\n    _this.context.transport.on(\"start\", _this._syncedCallback);\n\n    _this.context.transport.on(\"pause\", _this._syncedCallback);\n\n    _this.context.transport.on(\"stop\", _this._syncedCallback); // disconnect the constant source from the output and replace it with another one\n\n\n    _this._constantSource.disconnect();\n\n    _this._constantSource.stop(0); // create a new one\n\n\n    _this._constantSource = _this.output = new ToneConstantSource({\n      context: _this.context,\n      offset: options.value,\n      units: options.units\n    }).start(0);\n\n    _this.setValueAtTime(options.value, 0);\n\n    return _this;\n  }\n  /**\n   * Callback which is invoked every tick.\n   */\n\n\n  _createClass(SyncedSignal, [{\n    key: \"_onTick\",\n    value: function _onTick(time) {\n      var val = _get(_getPrototypeOf(SyncedSignal.prototype), \"getValueAtTime\", this).call(this, this.context.transport.seconds); // approximate ramp curves with linear ramps\n\n\n      if (this._lastVal !== val) {\n        this._lastVal = val;\n\n        this._constantSource.offset.setValueAtTime(val, time);\n      }\n    }\n    /**\n     * Anchor the value at the start and stop of the Transport\n     */\n\n  }, {\n    key: \"_anchorValue\",\n    value: function _anchorValue(time) {\n      var val = _get(_getPrototypeOf(SyncedSignal.prototype), \"getValueAtTime\", this).call(this, this.context.transport.seconds);\n\n      this._lastVal = val;\n\n      this._constantSource.offset.cancelAndHoldAtTime(time);\n\n      this._constantSource.offset.setValueAtTime(val, time);\n    }\n  }, {\n    key: \"getValueAtTime\",\n    value: function getValueAtTime(time) {\n      var computedTime = new TransportTimeClass(this.context, time).toSeconds();\n      return _get(_getPrototypeOf(SyncedSignal.prototype), \"getValueAtTime\", this).call(this, computedTime);\n    }\n  }, {\n    key: \"setValueAtTime\",\n    value: function setValueAtTime(value, time) {\n      var computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\n      _get(_getPrototypeOf(SyncedSignal.prototype), \"setValueAtTime\", this).call(this, value, computedTime);\n\n      return this;\n    }\n  }, {\n    key: \"linearRampToValueAtTime\",\n    value: function linearRampToValueAtTime(value, time) {\n      var computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\n      _get(_getPrototypeOf(SyncedSignal.prototype), \"linearRampToValueAtTime\", this).call(this, value, computedTime);\n\n      return this;\n    }\n  }, {\n    key: \"exponentialRampToValueAtTime\",\n    value: function exponentialRampToValueAtTime(value, time) {\n      var computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\n      _get(_getPrototypeOf(SyncedSignal.prototype), \"exponentialRampToValueAtTime\", this).call(this, value, computedTime);\n\n      return this;\n    }\n  }, {\n    key: \"setTargetAtTime\",\n    value: function setTargetAtTime(value, startTime, timeConstant) {\n      var computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\n      _get(_getPrototypeOf(SyncedSignal.prototype), \"setTargetAtTime\", this).call(this, value, computedTime, timeConstant);\n\n      return this;\n    }\n  }, {\n    key: \"cancelScheduledValues\",\n    value: function cancelScheduledValues(startTime) {\n      var computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\n      _get(_getPrototypeOf(SyncedSignal.prototype), \"cancelScheduledValues\", this).call(this, computedTime);\n\n      return this;\n    }\n  }, {\n    key: \"setValueCurveAtTime\",\n    value: function setValueCurveAtTime(values, startTime, duration, scaling) {\n      var computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n      duration = this.toSeconds(duration);\n\n      _get(_getPrototypeOf(SyncedSignal.prototype), \"setValueCurveAtTime\", this).call(this, values, computedTime, duration, scaling);\n\n      return this;\n    }\n  }, {\n    key: \"cancelAndHoldAtTime\",\n    value: function cancelAndHoldAtTime(time) {\n      var computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\n      _get(_getPrototypeOf(SyncedSignal.prototype), \"cancelAndHoldAtTime\", this).call(this, computedTime);\n\n      return this;\n    }\n  }, {\n    key: \"setRampPoint\",\n    value: function setRampPoint(time) {\n      var computedTime = new TransportTimeClass(this.context, time).toSeconds();\n\n      _get(_getPrototypeOf(SyncedSignal.prototype), \"setRampPoint\", this).call(this, computedTime);\n\n      return this;\n    }\n  }, {\n    key: \"exponentialRampTo\",\n    value: function exponentialRampTo(value, rampTime, startTime) {\n      var computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\n      _get(_getPrototypeOf(SyncedSignal.prototype), \"exponentialRampTo\", this).call(this, value, rampTime, computedTime);\n\n      return this;\n    }\n  }, {\n    key: \"linearRampTo\",\n    value: function linearRampTo(value, rampTime, startTime) {\n      var computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\n      _get(_getPrototypeOf(SyncedSignal.prototype), \"linearRampTo\", this).call(this, value, rampTime, computedTime);\n\n      return this;\n    }\n  }, {\n    key: \"targetRampTo\",\n    value: function targetRampTo(value, rampTime, startTime) {\n      var computedTime = new TransportTimeClass(this.context, startTime).toSeconds();\n\n      _get(_getPrototypeOf(SyncedSignal.prototype), \"targetRampTo\", this).call(this, value, rampTime, computedTime);\n\n      return this;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(SyncedSignal.prototype), \"dispose\", this).call(this);\n\n      this.context.transport.clear(this._synced);\n      this.context.transport.off(\"start\", this._syncedCallback);\n      this.context.transport.off(\"pause\", this._syncedCallback);\n      this.context.transport.off(\"stop\", this._syncedCallback);\n\n      this._constantSource.dispose();\n\n      return this;\n    }\n  }]);\n\n  return SyncedSignal;\n}(Signal);","map":null,"metadata":{},"sourceType":"module"}