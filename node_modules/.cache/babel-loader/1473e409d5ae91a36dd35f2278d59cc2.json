{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { ToneEvent } from \"./ToneEvent\";\nimport { ToneWithContext } from \"../core/context/ToneWithContext\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { noOp } from \"../core/util/Interface\";\n/**\n * Loop creates a looped callback at the\n * specified interval. The callback can be\n * started, stopped and scheduled along\n * the Transport's timeline.\n * @example\n * const loop = new Tone.Loop((time) => {\n * \t// triggered every eighth note.\n * \tconsole.log(time);\n * }, \"8n\").start(0);\n * Tone.Transport.start();\n * @category Event\n */\n\nexport var Loop = /*#__PURE__*/function (_ToneWithContext) {\n  _inherits(Loop, _ToneWithContext);\n\n  var _super = _createSuper(Loop);\n\n  function Loop() {\n    var _this;\n\n    _classCallCheck(this, Loop);\n\n    _this = _super.call(this, optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]));\n    _this.name = \"Loop\";\n    var options = optionsFromArguments(Loop.getDefaults(), arguments, [\"callback\", \"interval\"]);\n    _this._event = new ToneEvent({\n      context: _this.context,\n      callback: _this._tick.bind(_assertThisInitialized(_this)),\n      loop: true,\n      loopEnd: options.interval,\n      playbackRate: options.playbackRate,\n      probability: options.probability\n    });\n    _this.callback = options.callback; // set the iterations\n\n    _this.iterations = options.iterations;\n    return _this;\n  }\n\n  _createClass(Loop, [{\n    key: \"start\",\n    value:\n    /**\n     * Start the loop at the specified time along the Transport's timeline.\n     * @param  time  When to start the Loop.\n     */\n    function start(time) {\n      this._event.start(time);\n\n      return this;\n    }\n    /**\n     * Stop the loop at the given time.\n     * @param  time  When to stop the Loop.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this._event.stop(time);\n\n      return this;\n    }\n    /**\n     * Cancel all scheduled events greater than or equal to the given time\n     * @param  time  The time after which events will be cancel.\n     */\n\n  }, {\n    key: \"cancel\",\n    value: function cancel(time) {\n      this._event.cancel(time);\n\n      return this;\n    }\n    /**\n     * Internal function called when the notes should be called\n     * @param time  The time the event occurs\n     */\n\n  }, {\n    key: \"_tick\",\n    value: function _tick(time) {\n      this.callback(time);\n    }\n    /**\n     * The state of the Loop, either started or stopped.\n     */\n\n  }, {\n    key: \"state\",\n    get: function get() {\n      return this._event.state;\n    }\n    /**\n     * The progress of the loop as a value between 0-1. 0, when the loop is stopped or done iterating.\n     */\n\n  }, {\n    key: \"progress\",\n    get: function get() {\n      return this._event.progress;\n    }\n    /**\n     * The time between successive callbacks.\n     * @example\n     * const loop = new Tone.Loop();\n     * loop.interval = \"8n\"; // loop every 8n\n     */\n\n  }, {\n    key: \"interval\",\n    get: function get() {\n      return this._event.loopEnd;\n    },\n    set: function set(interval) {\n      this._event.loopEnd = interval;\n    }\n    /**\n     * The playback rate of the loop. The normal playback rate is 1 (no change).\n     * A `playbackRate` of 2 would be twice as fast.\n     */\n\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this._event.playbackRate;\n    },\n    set: function set(rate) {\n      this._event.playbackRate = rate;\n    }\n    /**\n     * Random variation +/-0.01s to the scheduled time.\n     * Or give it a time value which it will randomize by.\n     */\n\n  }, {\n    key: \"humanize\",\n    get: function get() {\n      return this._event.humanize;\n    },\n    set: function set(variation) {\n      this._event.humanize = variation;\n    }\n    /**\n     * The probably of the callback being invoked.\n     */\n\n  }, {\n    key: \"probability\",\n    get: function get() {\n      return this._event.probability;\n    },\n    set: function set(prob) {\n      this._event.probability = prob;\n    }\n    /**\n     * Muting the Loop means that no callbacks are invoked.\n     */\n\n  }, {\n    key: \"mute\",\n    get: function get() {\n      return this._event.mute;\n    },\n    set: function set(mute) {\n      this._event.mute = mute;\n    }\n    /**\n     * The number of iterations of the loop. The default value is `Infinity` (loop forever).\n     */\n\n  }, {\n    key: \"iterations\",\n    get: function get() {\n      if (this._event.loop === true) {\n        return Infinity;\n      } else {\n        return this._event.loop;\n      }\n    },\n    set: function set(iters) {\n      if (iters === Infinity) {\n        this._event.loop = true;\n      } else {\n        this._event.loop = iters;\n      }\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Loop.prototype), \"dispose\", this).call(this);\n\n      this._event.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneWithContext.getDefaults(), {\n        interval: \"4n\",\n        callback: noOp,\n        playbackRate: 1,\n        iterations: Infinity,\n        probability: 1,\n        mute: false,\n        humanize: false\n      });\n    }\n  }]);\n\n  return Loop;\n}(ToneWithContext);","map":null,"metadata":{},"sourceType":"module"}