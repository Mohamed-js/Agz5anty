{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { Param } from \"../../core/context/Param\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\n/**\n * Compressor is a thin wrapper around the Web Audio\n * [DynamicsCompressorNode](http://webaudio.github.io/web-audio-api/#the-dynamicscompressornode-interface).\n * Compression reduces the volume of loud sounds or amplifies quiet sounds\n * by narrowing or \"compressing\" an audio signal's dynamic range.\n * Read more on [Wikipedia](https://en.wikipedia.org/wiki/Dynamic_range_compression).\n * @example\n * const comp = new Tone.Compressor(-30, 3);\n * @category Component\n */\n\nexport var Compressor = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(Compressor, _ToneAudioNode);\n\n  var _super = _createSuper(Compressor);\n\n  function Compressor() {\n    var _this;\n\n    _classCallCheck(this, Compressor);\n\n    _this = _super.call(this, optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]));\n    _this.name = \"Compressor\";\n    /**\n     * the compressor node\n     */\n\n    _this._compressor = _this.context.createDynamicsCompressor();\n    _this.input = _this._compressor;\n    _this.output = _this._compressor;\n    var options = optionsFromArguments(Compressor.getDefaults(), arguments, [\"threshold\", \"ratio\"]);\n    _this.threshold = new Param({\n      minValue: _this._compressor.threshold.minValue,\n      maxValue: _this._compressor.threshold.maxValue,\n      context: _this.context,\n      convert: false,\n      param: _this._compressor.threshold,\n      units: \"decibels\",\n      value: options.threshold\n    });\n    _this.attack = new Param({\n      minValue: _this._compressor.attack.minValue,\n      maxValue: _this._compressor.attack.maxValue,\n      context: _this.context,\n      param: _this._compressor.attack,\n      units: \"time\",\n      value: options.attack\n    });\n    _this.release = new Param({\n      minValue: _this._compressor.release.minValue,\n      maxValue: _this._compressor.release.maxValue,\n      context: _this.context,\n      param: _this._compressor.release,\n      units: \"time\",\n      value: options.release\n    });\n    _this.knee = new Param({\n      minValue: _this._compressor.knee.minValue,\n      maxValue: _this._compressor.knee.maxValue,\n      context: _this.context,\n      convert: false,\n      param: _this._compressor.knee,\n      units: \"decibels\",\n      value: options.knee\n    });\n    _this.ratio = new Param({\n      minValue: _this._compressor.ratio.minValue,\n      maxValue: _this._compressor.ratio.maxValue,\n      context: _this.context,\n      convert: false,\n      param: _this._compressor.ratio,\n      units: \"positive\",\n      value: options.ratio\n    }); // set the defaults\n\n    readOnly(_assertThisInitialized(_this), [\"knee\", \"release\", \"attack\", \"ratio\", \"threshold\"]);\n    return _this;\n  }\n\n  _createClass(Compressor, [{\n    key: \"reduction\",\n    get:\n    /**\n     * A read-only decibel value for metering purposes, representing the current amount of gain\n     * reduction that the compressor is applying to the signal. If fed no signal the value will be 0 (no gain reduction).\n     */\n    function get() {\n      return this._compressor.reduction;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Compressor.prototype), \"dispose\", this).call(this);\n\n      this._compressor.disconnect();\n\n      this.attack.dispose();\n      this.release.dispose();\n      this.threshold.dispose();\n      this.ratio.dispose();\n      this.knee.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        attack: 0.003,\n        knee: 30,\n        ratio: 12,\n        release: 0.25,\n        threshold: -24\n      });\n    }\n  }]);\n\n  return Compressor;\n}(ToneAudioNode);","map":null,"metadata":{},"sourceType":"module"}