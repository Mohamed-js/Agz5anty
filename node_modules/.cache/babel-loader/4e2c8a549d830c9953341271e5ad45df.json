{"ast":null,"code":"import _regeneratorRuntime from \"@babel/runtime/regenerator\";\n\nfunction asyncGeneratorStep(gen, resolve, reject, _next, _throw, key, arg) { try { var info = gen[key](arg); var value = info.value; } catch (error) { reject(error); return; } if (info.done) { resolve(value); } else { Promise.resolve(value).then(_next, _throw); } }\n\nfunction _asyncToGenerator(fn) { return function () { var self = this, args = arguments; return new Promise(function (resolve, reject) { var gen = fn.apply(self, args); function _next(value) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"next\", value); } function _throw(err) { asyncGeneratorStep(gen, resolve, reject, _next, _throw, \"throw\", err); } _next(undefined); }); }; }\n\n// Bug #179: Firefox does not allow to transfer any buffer which has been passed to the process() method as an argument.\nexport var createTestAudioWorkletProcessorPostMessageSupport = function createTestAudioWorkletProcessorPostMessageSupport(nativeAudioWorkletNodeConstructor, nativeOfflineAudioContextConstructor) {\n  return /*#__PURE__*/_asyncToGenerator( /*#__PURE__*/_regeneratorRuntime.mark(function _callee() {\n    var blob, offlineAudioContext, url, isEmittingMessageEvents, isEmittingProcessorErrorEvents, audioWorkletNode, oscillator;\n    return _regeneratorRuntime.wrap(function _callee$(_context) {\n      while (1) {\n        switch (_context.prev = _context.next) {\n          case 0:\n            if (!(nativeAudioWorkletNodeConstructor === null)) {\n              _context.next = 2;\n              break;\n            }\n\n            return _context.abrupt(\"return\", true);\n\n          case 2:\n            if (!(nativeOfflineAudioContextConstructor === null)) {\n              _context.next = 4;\n              break;\n            }\n\n            return _context.abrupt(\"return\", false);\n\n          case 4:\n            blob = new Blob(['class A extends AudioWorkletProcessor{process(i){this.port.postMessage(i,[i[0][0].buffer])}}registerProcessor(\"a\",A)'], {\n              type: 'application/javascript; charset=utf-8'\n            });\n            offlineAudioContext = new nativeOfflineAudioContextConstructor(1, 128, 8000);\n            url = URL.createObjectURL(blob);\n            isEmittingMessageEvents = false;\n            isEmittingProcessorErrorEvents = false;\n            _context.prev = 9;\n            _context.next = 12;\n            return offlineAudioContext.audioWorklet.addModule(url);\n\n          case 12:\n            audioWorkletNode = new nativeAudioWorkletNodeConstructor(offlineAudioContext, 'a', {\n              numberOfOutputs: 0\n            });\n            oscillator = offlineAudioContext.createOscillator();\n\n            audioWorkletNode.port.onmessage = function () {\n              return isEmittingMessageEvents = true;\n            };\n\n            audioWorkletNode.onprocessorerror = function () {\n              return isEmittingProcessorErrorEvents = true;\n            };\n\n            oscillator.connect(audioWorkletNode);\n            _context.next = 19;\n            return offlineAudioContext.startRendering();\n\n          case 19:\n            _context.next = 23;\n            break;\n\n          case 21:\n            _context.prev = 21;\n            _context.t0 = _context[\"catch\"](9);\n\n          case 23:\n            _context.prev = 23;\n            URL.revokeObjectURL(url);\n            return _context.finish(23);\n\n          case 26:\n            return _context.abrupt(\"return\", isEmittingMessageEvents && !isEmittingProcessorErrorEvents);\n\n          case 27:\n          case \"end\":\n            return _context.stop();\n        }\n      }\n    }, _callee, null, [[9, 21, 23, 26]]);\n  }));\n};","map":null,"metadata":{},"sourceType":"module"}