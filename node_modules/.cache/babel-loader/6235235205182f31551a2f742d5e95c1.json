{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Gain } from \"../../core/context/Gain\";\n/**\n * A one pole filter with 6db-per-octave rolloff. Either \"highpass\" or \"lowpass\".\n * Note that changing the type or frequency may result in a discontinuity which\n * can sound like a click or pop.\n * References:\n * * http://www.earlevel.com/main/2012/12/15/a-one-pole-filter/\n * * http://www.dspguide.com/ch19/2.htm\n * * https://github.com/vitaliy-bobrov/js-rocks/blob/master/src/app/audio/effects/one-pole-filters.ts\n * @category Component\n */\n\nexport var OnePoleFilter = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(OnePoleFilter, _ToneAudioNode);\n\n  var _super = _createSuper(OnePoleFilter);\n\n  function OnePoleFilter() {\n    var _this;\n\n    _classCallCheck(this, OnePoleFilter);\n\n    _this = _super.call(this, optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]));\n    _this.name = \"OnePoleFilter\";\n    var options = optionsFromArguments(OnePoleFilter.getDefaults(), arguments, [\"frequency\", \"type\"]);\n    _this._frequency = options.frequency;\n    _this._type = options.type;\n    _this.input = new Gain({\n      context: _this.context\n    });\n    _this.output = new Gain({\n      context: _this.context\n    });\n\n    _this._createFilter();\n\n    return _this;\n  }\n\n  _createClass(OnePoleFilter, [{\n    key: \"_createFilter\",\n    value:\n    /**\n     * Create a filter and dispose the old one\n     */\n    function _createFilter() {\n      var _this2 = this;\n\n      var oldFilter = this._filter;\n      var freq = this.toFrequency(this._frequency);\n      var t = 1 / (2 * Math.PI * freq);\n\n      if (this._type === \"lowpass\") {\n        var a0 = 1 / (t * this.context.sampleRate);\n        var b1 = a0 - 1;\n        this._filter = this.context.createIIRFilter([a0, 0], [1, b1]);\n      } else {\n        var _b = 1 / (t * this.context.sampleRate) - 1;\n\n        this._filter = this.context.createIIRFilter([1, -1], [1, _b]);\n      }\n\n      this.input.chain(this._filter, this.output);\n\n      if (oldFilter) {\n        // dispose it on the next block\n        this.context.setTimeout(function () {\n          if (!_this2.disposed) {\n            _this2.input.disconnect(oldFilter);\n\n            oldFilter.disconnect();\n          }\n        }, this.blockTime);\n      }\n    }\n    /**\n     * The frequency value.\n     */\n\n  }, {\n    key: \"frequency\",\n    get: function get() {\n      return this._frequency;\n    },\n    set: function set(fq) {\n      this._frequency = fq;\n\n      this._createFilter();\n    }\n    /**\n     * The OnePole Filter type, either \"highpass\" or \"lowpass\"\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._type;\n    },\n    set: function set(t) {\n      this._type = t;\n\n      this._createFilter();\n    }\n    /**\n     * Get the frequency response curve. This curve represents how the filter\n     * responses to frequencies between 20hz-20khz.\n     * @param  len The number of values to return\n     * @return The frequency response curve between 20-20kHz\n     */\n\n  }, {\n    key: \"getFrequencyResponse\",\n    value: function getFrequencyResponse() {\n      var len = arguments.length > 0 && arguments[0] !== undefined ? arguments[0] : 128;\n      var freqValues = new Float32Array(len);\n\n      for (var i = 0; i < len; i++) {\n        var norm = Math.pow(i / len, 2);\n        var freq = norm * (20000 - 20) + 20;\n        freqValues[i] = freq;\n      }\n\n      var magValues = new Float32Array(len);\n      var phaseValues = new Float32Array(len);\n\n      this._filter.getFrequencyResponse(freqValues, magValues, phaseValues);\n\n      return magValues;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(OnePoleFilter.prototype), \"dispose\", this).call(this);\n\n      this.input.dispose();\n      this.output.dispose();\n\n      this._filter.disconnect();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        frequency: 880,\n        type: \"lowpass\"\n      });\n    }\n  }]);\n\n  return OnePoleFilter;\n}(ToneAudioNode);","map":null,"metadata":{},"sourceType":"module"}