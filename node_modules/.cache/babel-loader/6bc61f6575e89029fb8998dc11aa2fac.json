{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { Gain } from \"../../core/context/Gain\";\nimport { connect, ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly } from \"../../core/util/Interface\";\nimport { GainToAudio } from \"../../signal/GainToAudio\";\nimport { Signal } from \"../../signal/Signal\";\n/**\n * Tone.Crossfade provides equal power fading between two inputs.\n * More on crossfading technique [here](https://en.wikipedia.org/wiki/Fade_(audio_engineering)#Crossfading).\n * ```\n *                                             +---------+\n *                                            +> input a +>--+\n * +-----------+   +---------------------+     |         |   |\n * | 1s signal +>--> stereoPannerNode  L +>----> gain    |   |\n * +-----------+   |                     |     +---------+   |\n *               +-> pan               R +>-+                |   +--------+\n *               | +---------------------+  |                +---> output +>\n *  +------+     |                          |  +---------+   |   +--------+\n *  | fade +>----+                          | +> input b +>--+\n *  +------+                                |  |         |\n *                                          +--> gain    |\n *                                             +---------+\n * ```\n * @example\n * const crossFade = new Tone.CrossFade().toDestination();\n * // connect two inputs Tone.to a/b\n * const inputA = new Tone.Oscillator(440, \"square\").connect(crossFade.a).start();\n * const inputB = new Tone.Oscillator(440, \"sine\").connect(crossFade.b).start();\n * // use the fade to control the mix between the two\n * crossFade.fade.value = 0.5;\n * @category Component\n */\n\nexport var CrossFade = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(CrossFade, _ToneAudioNode);\n\n  var _super = _createSuper(CrossFade);\n\n  function CrossFade() {\n    var _this;\n\n    _classCallCheck(this, CrossFade);\n\n    _this = _super.call(this, Object.assign(optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"])));\n    _this.name = \"CrossFade\";\n    /**\n     * The crossfading is done by a StereoPannerNode\n     */\n\n    _this._panner = _this.context.createStereoPanner();\n    /**\n     * Split the output of the panner node into two values used to control the gains.\n     */\n\n    _this._split = _this.context.createChannelSplitter(2);\n    /**\n     * Convert the fade value into an audio range value so it can be connected\n     * to the panner.pan AudioParam\n     */\n\n    _this._g2a = new GainToAudio({\n      context: _this.context\n    });\n    /**\n     * The input which is at full level when fade = 0\n     */\n\n    _this.a = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    /**\n     * The input which is at full level when fade = 1\n     */\n\n    _this.b = new Gain({\n      context: _this.context,\n      gain: 0\n    });\n    /**\n     * The output is a mix between `a` and `b` at the ratio of `fade`\n     */\n\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this._internalChannels = [_this.a, _this.b];\n    var options = optionsFromArguments(CrossFade.getDefaults(), arguments, [\"fade\"]);\n    _this.fade = new Signal({\n      context: _this.context,\n      units: \"normalRange\",\n      value: options.fade\n    });\n    readOnly(_assertThisInitialized(_this), \"fade\");\n\n    _this.context.getConstant(1).connect(_this._panner);\n\n    _this._panner.connect(_this._split); // this is necessary for standardized-audio-context\n    // doesn't make any difference for the native AudioContext\n    // https://github.com/chrisguttandin/standardized-audio-context/issues/647\n\n\n    _this._panner.channelCount = 1;\n    _this._panner.channelCountMode = \"explicit\";\n    connect(_this._split, _this.a.gain, 0);\n    connect(_this._split, _this.b.gain, 1);\n\n    _this.fade.chain(_this._g2a, _this._panner.pan);\n\n    _this.a.connect(_this.output);\n\n    _this.b.connect(_this.output);\n\n    return _this;\n  }\n\n  _createClass(CrossFade, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(CrossFade.prototype), \"dispose\", this).call(this);\n\n      this.a.dispose();\n      this.b.dispose();\n      this.output.dispose();\n      this.fade.dispose();\n\n      this._g2a.dispose();\n\n      this._panner.disconnect();\n\n      this._split.disconnect();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        fade: 0.5\n      });\n    }\n  }]);\n\n  return CrossFade;\n}(ToneAudioNode);","map":null,"metadata":{},"sourceType":"module"}