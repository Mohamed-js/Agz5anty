{"ast":null,"code":"import \"../../core/worklet/SingleIOProcessor.worklet\";\nimport \"../../core/worklet/DelayLine.worklet\";\nimport { registerProcessor } from \"../../core/worklet/WorkletGlobalScope\";\nexport var workletName = \"feedback-comb-filter\";\nvar feedbackCombFilter =\n/* javascript */\n\"\\n\\tclass FeedbackCombFilterWorklet extends SingleIOProcessor {\\n\\n\\t\\tconstructor(options) {\\n\\t\\t\\tsuper(options);\\n\\t\\t\\tthis.delayLine = new DelayLine(this.sampleRate, options.channelCount || 2);\\n\\t\\t}\\n\\n\\t\\tstatic get parameterDescriptors() {\\n\\t\\t\\treturn [{\\n\\t\\t\\t\\tname: \\\"delayTime\\\",\\n\\t\\t\\t\\tdefaultValue: 0.1,\\n\\t\\t\\t\\tminValue: 0,\\n\\t\\t\\t\\tmaxValue: 1,\\n\\t\\t\\t\\tautomationRate: \\\"k-rate\\\"\\n\\t\\t\\t}, {\\n\\t\\t\\t\\tname: \\\"feedback\\\",\\n\\t\\t\\t\\tdefaultValue: 0.5,\\n\\t\\t\\t\\tminValue: 0,\\n\\t\\t\\t\\tmaxValue: 0.9999,\\n\\t\\t\\t\\tautomationRate: \\\"k-rate\\\"\\n\\t\\t\\t}];\\n\\t\\t}\\n\\n\\t\\tgenerate(input, channel, parameters) {\\n\\t\\t\\tconst delayedSample = this.delayLine.get(channel, parameters.delayTime * this.sampleRate);\\n\\t\\t\\tthis.delayLine.push(channel, input + delayedSample * parameters.feedback);\\n\\t\\t\\treturn delayedSample;\\n\\t\\t}\\n\\t}\\n\";\nregisterProcessor(workletName, feedbackCombFilter);","map":null,"metadata":{},"sourceType":"module"}