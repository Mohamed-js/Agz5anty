{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _toConsumableArray(arr) { return _arrayWithoutHoles(arr) || _iterableToArray(arr) || _unsupportedIterableToArray(arr) || _nonIterableSpread(); }\n\nfunction _nonIterableSpread() { throw new TypeError(\"Invalid attempt to spread non-iterable instance.\\nIn order to be iterable, non-array objects must have a [Symbol.iterator]() method.\"); }\n\nfunction _unsupportedIterableToArray(o, minLen) { if (!o) return; if (typeof o === \"string\") return _arrayLikeToArray(o, minLen); var n = Object.prototype.toString.call(o).slice(8, -1); if (n === \"Object\" && o.constructor) n = o.constructor.name; if (n === \"Map\" || n === \"Set\") return Array.from(o); if (n === \"Arguments\" || /^(?:Ui|I)nt(?:8|16|32)(?:Clamped)?Array$/.test(n)) return _arrayLikeToArray(o, minLen); }\n\nfunction _iterableToArray(iter) { if (typeof Symbol !== \"undefined\" && Symbol.iterator in Object(iter)) return Array.from(iter); }\n\nfunction _arrayWithoutHoles(arr) { if (Array.isArray(arr)) return _arrayLikeToArray(arr); }\n\nfunction _arrayLikeToArray(arr, len) { if (len == null || len > arr.length) len = arr.length; for (var i = 0, arr2 = new Array(len); i < len; i++) { arr2[i] = arr[i]; } return arr2; }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { StereoEffect } from \"./StereoEffect\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Signal } from \"../signal/Signal\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Phaser is a phaser effect. Phasers work by changing the phase\n * of different frequency components of an incoming signal. Read more on\n * [Wikipedia](https://en.wikipedia.org/wiki/Phaser_(effect)).\n * Inspiration for this phaser comes from [Tuna.js](https://github.com/Dinahmoe/tuna/).\n * @example\n * const phaser = new Tone.Phaser({\n * \tfrequency: 15,\n * \toctaves: 5,\n * \tbaseFrequency: 1000\n * }).toDestination();\n * const synth = new Tone.FMSynth().connect(phaser);\n * synth.triggerAttackRelease(\"E3\", \"2n\");\n * @category Effect\n */\n\nexport var Phaser = /*#__PURE__*/function (_StereoEffect) {\n  _inherits(Phaser, _StereoEffect);\n\n  var _super = _createSuper(Phaser);\n\n  function Phaser() {\n    var _this2, _this3;\n\n    var _this;\n\n    _classCallCheck(this, Phaser);\n\n    _this = _super.call(this, optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]));\n    _this.name = \"Phaser\";\n    var options = optionsFromArguments(Phaser.getDefaults(), arguments, [\"frequency\", \"octaves\", \"baseFrequency\"]);\n    _this._lfoL = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1\n    });\n    _this._lfoR = new LFO({\n      context: _this.context,\n      frequency: options.frequency,\n      min: 0,\n      max: 1,\n      phase: 180\n    });\n    _this._baseFrequency = _this.toFrequency(options.baseFrequency);\n    _this._octaves = options.octaves;\n    _this.Q = new Signal({\n      context: _this.context,\n      value: options.Q,\n      units: \"positive\"\n    });\n    _this._filtersL = _this._makeFilters(options.stages, _this._lfoL);\n    _this._filtersR = _this._makeFilters(options.stages, _this._lfoR);\n    _this.frequency = _this._lfoL.frequency;\n    _this.frequency.value = options.frequency; // connect them up\n\n    (_this2 = _this).connectEffectLeft.apply(_this2, _toConsumableArray(_this._filtersL));\n\n    (_this3 = _this).connectEffectRight.apply(_this3, _toConsumableArray(_this._filtersR)); // control the frequency with one LFO\n\n\n    _this._lfoL.frequency.connect(_this._lfoR.frequency); // set the options\n\n\n    _this.baseFrequency = options.baseFrequency;\n    _this.octaves = options.octaves; // start the lfo\n\n    _this._lfoL.start();\n\n    _this._lfoR.start();\n\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"Q\"]);\n    return _this;\n  }\n\n  _createClass(Phaser, [{\n    key: \"_makeFilters\",\n    value: function _makeFilters(stages, connectToFreq) {\n      var filters = []; // make all the filters\n\n      for (var i = 0; i < stages; i++) {\n        var filter = this.context.createBiquadFilter();\n        filter.type = \"allpass\";\n        this.Q.connect(filter.Q);\n        connectToFreq.connect(filter.frequency);\n        filters.push(filter);\n      }\n\n      return filters;\n    }\n    /**\n     * The number of octaves the phase goes above the baseFrequency\n     */\n\n  }, {\n    key: \"octaves\",\n    get: function get() {\n      return this._octaves;\n    },\n    set: function set(octaves) {\n      this._octaves = octaves;\n      var max = this._baseFrequency * Math.pow(2, octaves);\n      this._lfoL.max = max;\n      this._lfoR.max = max;\n    }\n    /**\n     * The the base frequency of the filters.\n     */\n\n  }, {\n    key: \"baseFrequency\",\n    get: function get() {\n      return this._baseFrequency;\n    },\n    set: function set(freq) {\n      this._baseFrequency = this.toFrequency(freq);\n      this._lfoL.min = this._baseFrequency;\n      this._lfoR.min = this._baseFrequency;\n      this.octaves = this._octaves;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Phaser.prototype), \"dispose\", this).call(this);\n\n      this.Q.dispose();\n\n      this._lfoL.dispose();\n\n      this._lfoR.dispose();\n\n      this._filtersL.forEach(function (f) {\n        return f.disconnect();\n      });\n\n      this._filtersR.forEach(function (f) {\n        return f.disconnect();\n      });\n\n      this.frequency.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoEffect.getDefaults(), {\n        frequency: 0.5,\n        octaves: 3,\n        stages: 10,\n        Q: 10,\n        baseFrequency: 350\n      });\n    }\n  }]);\n\n  return Phaser;\n}(StereoEffect);","map":null,"metadata":{},"sourceType":"module"}