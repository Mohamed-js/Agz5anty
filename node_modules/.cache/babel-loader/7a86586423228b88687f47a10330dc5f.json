{"ast":null,"code":"export var createWrapAudioBufferCopyChannelMethods = function createWrapAudioBufferCopyChannelMethods(convertNumberToUnsignedLong, createIndexSizeError) {\n  return function (audioBuffer) {\n    audioBuffer.copyFromChannel = function (destination, channelNumberAsNumber) {\n      var bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n      var channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n      if (channelNumber >= audioBuffer.numberOfChannels) {\n        throw createIndexSizeError();\n      }\n\n      var audioBufferLength = audioBuffer.length;\n      var channelData = audioBuffer.getChannelData(channelNumber);\n      var destinationLength = destination.length;\n\n      for (var i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < destinationLength; i += 1) {\n        destination[i] = channelData[i + bufferOffset];\n      }\n    };\n\n    audioBuffer.copyToChannel = function (source, channelNumberAsNumber) {\n      var bufferOffsetAsNumber = arguments.length > 2 && arguments[2] !== undefined ? arguments[2] : 0;\n      var bufferOffset = convertNumberToUnsignedLong(bufferOffsetAsNumber);\n      var channelNumber = convertNumberToUnsignedLong(channelNumberAsNumber);\n\n      if (channelNumber >= audioBuffer.numberOfChannels) {\n        throw createIndexSizeError();\n      }\n\n      var audioBufferLength = audioBuffer.length;\n      var channelData = audioBuffer.getChannelData(channelNumber);\n      var sourceLength = source.length;\n\n      for (var i = bufferOffset < 0 ? -bufferOffset : 0; i + bufferOffset < audioBufferLength && i < sourceLength; i += 1) {\n        channelData[i + bufferOffset] = source[i];\n      }\n    };\n  };\n};","map":null,"metadata":{},"sourceType":"module"}