{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { StereoEffect } from \"./StereoEffect\";\nimport { LFO } from \"../source/oscillator/LFO\";\nimport { Gain } from \"../core/context/Gain\";\nimport { Signal } from \"../signal/Signal\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { readOnly } from \"../core/util/Interface\";\n/**\n * Tremolo modulates the amplitude of an incoming signal using an [[LFO]].\n * The effect is a stereo effect where the modulation phase is inverted in each channel.\n *\n * @example\n * // create a tremolo and start it's LFO\n * const tremolo = new Tone.Tremolo(9, 0.75).toDestination().start();\n * // route an oscillator through the tremolo and start it\n * const oscillator = new Tone.Oscillator().connect(tremolo).start();\n *\n * @category Effect\n */\n\nexport var Tremolo = /*#__PURE__*/function (_StereoEffect) {\n  _inherits(Tremolo, _StereoEffect);\n\n  var _super = _createSuper(Tremolo);\n\n  function Tremolo() {\n    var _this;\n\n    _classCallCheck(this, Tremolo);\n\n    _this = _super.call(this, optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]));\n    _this.name = \"Tremolo\";\n    var options = optionsFromArguments(Tremolo.getDefaults(), arguments, [\"frequency\", \"depth\"]);\n    _this._lfoL = new LFO({\n      context: _this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    _this._lfoR = new LFO({\n      context: _this.context,\n      type: options.type,\n      min: 1,\n      max: 0\n    });\n    _this._amplitudeL = new Gain({\n      context: _this.context\n    });\n    _this._amplitudeR = new Gain({\n      context: _this.context\n    });\n    _this.frequency = new Signal({\n      context: _this.context,\n      value: options.frequency,\n      units: \"frequency\"\n    });\n    _this.depth = new Signal({\n      context: _this.context,\n      value: options.depth,\n      units: \"normalRange\"\n    });\n    readOnly(_assertThisInitialized(_this), [\"frequency\", \"depth\"]);\n\n    _this.connectEffectLeft(_this._amplitudeL);\n\n    _this.connectEffectRight(_this._amplitudeR);\n\n    _this._lfoL.connect(_this._amplitudeL.gain);\n\n    _this._lfoR.connect(_this._amplitudeR.gain);\n\n    _this.frequency.fan(_this._lfoL.frequency, _this._lfoR.frequency);\n\n    _this.depth.fan(_this._lfoR.amplitude, _this._lfoL.amplitude);\n\n    _this.spread = options.spread;\n    return _this;\n  }\n\n  _createClass(Tremolo, [{\n    key: \"start\",\n    value:\n    /**\n     * Start the tremolo.\n     */\n    function start(time) {\n      this._lfoL.start(time);\n\n      this._lfoR.start(time);\n\n      return this;\n    }\n    /**\n     * Stop the tremolo.\n     */\n\n  }, {\n    key: \"stop\",\n    value: function stop(time) {\n      this._lfoL.stop(time);\n\n      this._lfoR.stop(time);\n\n      return this;\n    }\n    /**\n     * Sync the effect to the transport.\n     */\n\n  }, {\n    key: \"sync\",\n    value: function sync() {\n      this._lfoL.sync();\n\n      this._lfoR.sync();\n\n      this.context.transport.syncSignal(this.frequency);\n      return this;\n    }\n    /**\n     * Unsync the filter from the transport\n     */\n\n  }, {\n    key: \"unsync\",\n    value: function unsync() {\n      this._lfoL.unsync();\n\n      this._lfoR.unsync();\n\n      this.context.transport.unsyncSignal(this.frequency);\n      return this;\n    }\n    /**\n     * The oscillator type.\n     */\n\n  }, {\n    key: \"type\",\n    get: function get() {\n      return this._lfoL.type;\n    },\n    set: function set(type) {\n      this._lfoL.type = type;\n      this._lfoR.type = type;\n    }\n    /**\n     * Amount of stereo spread. When set to 0, both LFO's will be panned centrally.\n     * When set to 180, LFO's will be panned hard left and right respectively.\n     */\n\n  }, {\n    key: \"spread\",\n    get: function get() {\n      return this._lfoR.phase - this._lfoL.phase; // 180\n    },\n    set: function set(spread) {\n      this._lfoL.phase = 90 - spread / 2;\n      this._lfoR.phase = spread / 2 + 90;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(Tremolo.prototype), \"dispose\", this).call(this);\n\n      this._lfoL.dispose();\n\n      this._lfoR.dispose();\n\n      this._amplitudeL.dispose();\n\n      this._amplitudeR.dispose();\n\n      this.frequency.dispose();\n      this.depth.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(StereoEffect.getDefaults(), {\n        frequency: 10,\n        type: \"sine\",\n        depth: 0.5,\n        spread: 180\n      });\n    }\n  }]);\n\n  return Tremolo;\n}(StereoEffect);","map":null,"metadata":{},"sourceType":"module"}