{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { getContext } from \"../Global\";\nimport { intervalToFrequencyRatio, mtof as _mtof } from \"./Conversions\";\nimport { ftom as _ftom, getA4, setA4 } from \"./Conversions\";\nimport { TimeClass } from \"./Time\";\n/**\n * Frequency is a primitive type for encoding Frequency values.\n * Eventually all time values are evaluated to hertz using the `valueOf` method.\n * @example\n * Tone.Frequency(\"C3\"); // 261\n * Tone.Frequency(38, \"midi\");\n * Tone.Frequency(\"C3\").transpose(4);\n * @category Unit\n */\n\nexport var FrequencyClass = /*#__PURE__*/function (_TimeClass) {\n  _inherits(FrequencyClass, _TimeClass);\n\n  var _super = _createSuper(FrequencyClass);\n\n  function FrequencyClass() {\n    var _this;\n\n    _classCallCheck(this, FrequencyClass);\n\n    _this = _super.apply(this, arguments);\n    _this.name = \"Frequency\";\n    _this.defaultUnits = \"hz\";\n    return _this;\n  }\n  /**\n   * The [concert tuning pitch](https://en.wikipedia.org/wiki/Concert_pitch) which is used\n   * to generate all the other pitch values from notes. A4's values in Hertz.\n   */\n\n\n  _createClass(FrequencyClass, [{\n    key: \"_getExpressions\",\n    value: //-------------------------------------\n    // \tAUGMENT BASE EXPRESSIONS\n    //-------------------------------------\n    function _getExpressions() {\n      return Object.assign({}, _get(_getPrototypeOf(FrequencyClass.prototype), \"_getExpressions\", this).call(this), {\n        midi: {\n          regexp: /^(\\d+(?:\\.\\d+)?midi)/,\n          method: function method(value) {\n            if (this.defaultUnits === \"midi\") {\n              return value;\n            } else {\n              return FrequencyClass.mtof(value);\n            }\n          }\n        },\n        note: {\n          regexp: /^([a-g]{1}(?:b|#|x|bb)?)(-?[0-9]+)/i,\n          method: function method(pitch, octave) {\n            var index = noteToScaleIndex[pitch.toLowerCase()];\n            var noteNumber = index + (parseInt(octave, 10) + 1) * 12;\n\n            if (this.defaultUnits === \"midi\") {\n              return noteNumber;\n            } else {\n              return FrequencyClass.mtof(noteNumber);\n            }\n          }\n        },\n        tr: {\n          regexp: /^(\\d+(?:\\.\\d+)?):(\\d+(?:\\.\\d+)?):?(\\d+(?:\\.\\d+)?)?/,\n          method: function method(m, q, s) {\n            var total = 1;\n\n            if (m && m !== \"0\") {\n              total *= this._beatsToUnits(this._getTimeSignature() * parseFloat(m));\n            }\n\n            if (q && q !== \"0\") {\n              total *= this._beatsToUnits(parseFloat(q));\n            }\n\n            if (s && s !== \"0\") {\n              total *= this._beatsToUnits(parseFloat(s) / 4);\n            }\n\n            return total;\n          }\n        }\n      });\n    } //-------------------------------------\n    // \tEXPRESSIONS\n    //-------------------------------------\n\n    /**\n     * Transposes the frequency by the given number of semitones.\n     * @return  A new transposed frequency\n     * @example\n     * Tone.Frequency(\"A4\").transpose(3); // \"C5\"\n     */\n\n  }, {\n    key: \"transpose\",\n    value: function transpose(interval) {\n      return new FrequencyClass(this.context, this.valueOf() * intervalToFrequencyRatio(interval));\n    }\n    /**\n     * Takes an array of semitone intervals and returns\n     * an array of frequencies transposed by those intervals.\n     * @return  Returns an array of Frequencies\n     * @example\n     * Tone.Frequency(\"A4\").harmonize([0, 3, 7]); // [\"A4\", \"C5\", \"E5\"]\n     */\n\n  }, {\n    key: \"harmonize\",\n    value: function harmonize(intervals) {\n      var _this2 = this;\n\n      return intervals.map(function (interval) {\n        return _this2.transpose(interval);\n      });\n    } //-------------------------------------\n    // \tUNIT CONVERSIONS\n    //-------------------------------------\n\n    /**\n     * Return the value of the frequency as a MIDI note\n     * @example\n     * Tone.Frequency(\"C4\").toMidi(); // 60\n     */\n\n  }, {\n    key: \"toMidi\",\n    value: function toMidi() {\n      return _ftom(this.valueOf());\n    }\n    /**\n     * Return the value of the frequency in Scientific Pitch Notation\n     * @example\n     * Tone.Frequency(69, \"midi\").toNote(); // \"A4\"\n     */\n\n  }, {\n    key: \"toNote\",\n    value: function toNote() {\n      var freq = this.toFrequency();\n      var log = Math.log2(freq / FrequencyClass.A4);\n      var noteNumber = Math.round(12 * log) + 57;\n      var octave = Math.floor(noteNumber / 12);\n\n      if (octave < 0) {\n        noteNumber += -12 * octave;\n      }\n\n      var noteName = scaleIndexToNote[noteNumber % 12];\n      return noteName + octave.toString();\n    }\n    /**\n     * Return the duration of one cycle in seconds.\n     */\n\n  }, {\n    key: \"toSeconds\",\n    value: function toSeconds() {\n      return 1 / _get(_getPrototypeOf(FrequencyClass.prototype), \"toSeconds\", this).call(this);\n    }\n    /**\n     * Return the duration of one cycle in ticks\n     */\n\n  }, {\n    key: \"toTicks\",\n    value: function toTicks() {\n      var quarterTime = this._beatsToUnits(1);\n\n      var quarters = this.valueOf() / quarterTime;\n      return Math.floor(quarters * this._getPPQ());\n    } //-------------------------------------\n    // \tUNIT CONVERSIONS HELPERS\n    //-------------------------------------\n\n    /**\n     * With no arguments, return 0\n     */\n\n  }, {\n    key: \"_noArg\",\n    value: function _noArg() {\n      return 0;\n    }\n    /**\n     * Returns the value of a frequency in the current units\n     */\n\n  }, {\n    key: \"_frequencyToUnits\",\n    value: function _frequencyToUnits(freq) {\n      return freq;\n    }\n    /**\n     * Returns the value of a tick in the current time units\n     */\n\n  }, {\n    key: \"_ticksToUnits\",\n    value: function _ticksToUnits(ticks) {\n      return 1 / (ticks * 60 / (this._getBpm() * this._getPPQ()));\n    }\n    /**\n     * Return the value of the beats in the current units\n     */\n\n  }, {\n    key: \"_beatsToUnits\",\n    value: function _beatsToUnits(beats) {\n      return 1 / _get(_getPrototypeOf(FrequencyClass.prototype), \"_beatsToUnits\", this).call(this, beats);\n    }\n    /**\n     * Returns the value of a second in the current units\n     */\n\n  }, {\n    key: \"_secondsToUnits\",\n    value: function _secondsToUnits(seconds) {\n      return 1 / seconds;\n    }\n    /**\n     * Convert a MIDI note to frequency value.\n     * @param  midi The midi number to convert.\n     * @return The corresponding frequency value\n     */\n\n  }], [{\n    key: \"A4\",\n    get: function get() {\n      return getA4();\n    },\n    set: function set(freq) {\n      setA4(freq);\n    }\n  }, {\n    key: \"mtof\",\n    value: function mtof(midi) {\n      return _mtof(midi);\n    }\n    /**\n     * Convert a frequency value to a MIDI note.\n     * @param frequency The value to frequency value to convert.\n     */\n\n  }, {\n    key: \"ftom\",\n    value: function ftom(frequency) {\n      return _ftom(frequency);\n    }\n  }]);\n\n  return FrequencyClass;\n}(TimeClass); //-------------------------------------\n// \tFREQUENCY CONVERSIONS\n//-------------------------------------\n\n/**\n * Note to scale index.\n * @hidden\n */\n\nvar noteToScaleIndex = {\n  cbb: -2,\n  cb: -1,\n  c: 0,\n  \"c#\": 1,\n  cx: 2,\n  dbb: 0,\n  db: 1,\n  d: 2,\n  \"d#\": 3,\n  dx: 4,\n  ebb: 2,\n  eb: 3,\n  e: 4,\n  \"e#\": 5,\n  ex: 6,\n  fbb: 3,\n  fb: 4,\n  f: 5,\n  \"f#\": 6,\n  fx: 7,\n  gbb: 5,\n  gb: 6,\n  g: 7,\n  \"g#\": 8,\n  gx: 9,\n  abb: 7,\n  ab: 8,\n  a: 9,\n  \"a#\": 10,\n  ax: 11,\n  bbb: 9,\n  bb: 10,\n  b: 11,\n  \"b#\": 12,\n  bx: 13\n};\n/**\n * scale index to note (sharps)\n * @hidden\n */\n\nvar scaleIndexToNote = [\"C\", \"C#\", \"D\", \"D#\", \"E\", \"F\", \"F#\", \"G\", \"G#\", \"A\", \"A#\", \"B\"];\n/**\n * Convert a value into a FrequencyClass object.\n * @category Unit\n * @example\n * const midi = Tone.Frequency(\"C3\").toMidi();\n * console.log(midi);\n * @example\n * const hertz = Tone.Frequency(38, \"midi\").toFrequency();\n * console.log(hertz);\n */\n\nexport function Frequency(value, units) {\n  return new FrequencyClass(getContext(), value, units);\n}","map":null,"metadata":{},"sourceType":"module"}