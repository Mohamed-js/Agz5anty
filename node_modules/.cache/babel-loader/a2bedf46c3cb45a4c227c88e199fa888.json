{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { Source } from \"../Source\";\nimport { noOp } from \"../../core/util/Interface\";\nimport { ToneAudioBuffer } from \"../../core/context/ToneAudioBuffer\";\nimport { defaultArg, optionsFromArguments } from \"../../core/util/Defaults\";\nimport { Clock } from \"../../core/clock/Clock\";\nimport { ToneBufferSource } from \"./ToneBufferSource\";\nimport { intervalToFrequencyRatio } from \"../../core/type/Conversions\";\nimport { assertRange } from \"../../core/util/Debug\";\n/**\n * GrainPlayer implements [granular synthesis](https://en.wikipedia.org/wiki/Granular_synthesis).\n * Granular Synthesis enables you to adjust pitch and playback rate independently. The grainSize is the\n * amount of time each small chunk of audio is played for and the overlap is the\n * amount of crossfading transition time between successive grains.\n * @category Source\n */\n\nexport var GrainPlayer = /*#__PURE__*/function (_Source) {\n  _inherits(GrainPlayer, _Source);\n\n  var _super = _createSuper(GrainPlayer);\n\n  function GrainPlayer() {\n    var _this;\n\n    _classCallCheck(this, GrainPlayer);\n\n    _this = _super.call(this, optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]));\n    _this.name = \"GrainPlayer\";\n    /**\n     * Internal loopStart value\n     */\n\n    _this._loopStart = 0;\n    /**\n     * Internal loopStart value\n     */\n\n    _this._loopEnd = 0;\n    /**\n     * All of the currently playing BufferSources\n     */\n\n    _this._activeSources = [];\n    var options = optionsFromArguments(GrainPlayer.getDefaults(), arguments, [\"url\", \"onload\"]);\n    _this.buffer = new ToneAudioBuffer({\n      onload: options.onload,\n      onerror: options.onerror,\n      reverse: options.reverse,\n      url: options.url\n    });\n    _this._clock = new Clock({\n      context: _this.context,\n      callback: _this._tick.bind(_assertThisInitialized(_this)),\n      frequency: 1 / options.grainSize\n    });\n    _this._playbackRate = options.playbackRate;\n    _this._grainSize = options.grainSize;\n    _this._overlap = options.overlap;\n    _this.detune = options.detune; // setup\n\n    _this.overlap = options.overlap;\n    _this.loop = options.loop;\n    _this.playbackRate = options.playbackRate;\n    _this.grainSize = options.grainSize;\n    _this.loopStart = options.loopStart;\n    _this.loopEnd = options.loopEnd;\n    _this.reverse = options.reverse;\n\n    _this._clock.on(\"stop\", _this._onstop.bind(_assertThisInitialized(_this)));\n\n    return _this;\n  }\n\n  _createClass(GrainPlayer, [{\n    key: \"_start\",\n    value:\n    /**\n     * Internal start method\n     */\n    function _start(time, offset, duration) {\n      offset = defaultArg(offset, 0);\n      offset = this.toSeconds(offset);\n      time = this.toSeconds(time);\n\n      var grainSize = 1 / this._clock.frequency.getValueAtTime(time);\n\n      this._clock.start(time, offset / grainSize);\n\n      if (duration) {\n        this.stop(time + this.toSeconds(duration));\n      }\n    }\n    /**\n     * Stop and then restart the player from the beginning (or offset)\n     * @param  time When the player should start.\n     * @param  offset The offset from the beginning of the sample to start at.\n     * @param  duration How long the sample should play. If no duration is given,\n     * \t\t\t\t\tit will default to the full length of the sample (minus any offset)\n     */\n\n  }, {\n    key: \"restart\",\n    value: function restart(time, offset, duration) {\n      _get(_getPrototypeOf(GrainPlayer.prototype), \"restart\", this).call(this, time, offset, duration);\n\n      return this;\n    }\n  }, {\n    key: \"_restart\",\n    value: function _restart(time, offset, duration) {\n      this._stop(time);\n\n      this._start(time, offset, duration);\n    }\n    /**\n     * Internal stop method\n     */\n\n  }, {\n    key: \"_stop\",\n    value: function _stop(time) {\n      this._clock.stop(time);\n    }\n    /**\n     * Invoked when the clock is stopped\n     */\n\n  }, {\n    key: \"_onstop\",\n    value: function _onstop(time) {\n      // stop the players\n      this._activeSources.forEach(function (source) {\n        source.fadeOut = 0;\n        source.stop(time);\n      });\n\n      this.onstop(this);\n    }\n    /**\n     * Invoked on each clock tick. scheduled a new grain at this time.\n     */\n\n  }, {\n    key: \"_tick\",\n    value: function _tick(time) {\n      var _this2 = this;\n\n      // check if it should stop looping\n      var ticks = this._clock.getTicksAtTime(time);\n\n      var offset = ticks * this._grainSize;\n      this.log(\"offset\", offset);\n\n      if (!this.loop && offset > this.buffer.duration) {\n        this.stop(time);\n        return;\n      } // at the beginning of the file, the fade in should be 0\n\n\n      var fadeIn = offset < this._overlap ? 0 : this._overlap; // create a buffer source\n\n      var source = new ToneBufferSource({\n        context: this.context,\n        url: this.buffer,\n        fadeIn: fadeIn,\n        fadeOut: this._overlap,\n        loop: this.loop,\n        loopStart: this._loopStart,\n        loopEnd: this._loopEnd,\n        // compute the playbackRate based on the detune\n        playbackRate: intervalToFrequencyRatio(this.detune / 100)\n      }).connect(this.output);\n      source.start(time, this._grainSize * ticks);\n      source.stop(time + this._grainSize / this.playbackRate); // add it to the active sources\n\n      this._activeSources.push(source); // remove it when it's done\n\n\n      source.onended = function () {\n        var index = _this2._activeSources.indexOf(source);\n\n        if (index !== -1) {\n          _this2._activeSources.splice(index, 1);\n        }\n      };\n    }\n    /**\n     * The playback rate of the sample\n     */\n\n  }, {\n    key: \"playbackRate\",\n    get: function get() {\n      return this._playbackRate;\n    },\n    set: function set(rate) {\n      assertRange(rate, 0.001);\n      this._playbackRate = rate;\n      this.grainSize = this._grainSize;\n    }\n    /**\n     * The loop start time.\n     */\n\n  }, {\n    key: \"loopStart\",\n    get: function get() {\n      return this._loopStart;\n    },\n    set: function set(time) {\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(time), 0, this.buffer.duration);\n      }\n\n      this._loopStart = this.toSeconds(time);\n    }\n    /**\n     * The loop end time.\n     */\n\n  }, {\n    key: \"loopEnd\",\n    get: function get() {\n      return this._loopEnd;\n    },\n    set: function set(time) {\n      if (this.buffer.loaded) {\n        assertRange(this.toSeconds(time), 0, this.buffer.duration);\n      }\n\n      this._loopEnd = this.toSeconds(time);\n    }\n    /**\n     * The direction the buffer should play in\n     */\n\n  }, {\n    key: \"reverse\",\n    get: function get() {\n      return this.buffer.reverse;\n    },\n    set: function set(rev) {\n      this.buffer.reverse = rev;\n    }\n    /**\n     * The size of each chunk of audio that the\n     * buffer is chopped into and played back at.\n     */\n\n  }, {\n    key: \"grainSize\",\n    get: function get() {\n      return this._grainSize;\n    },\n    set: function set(size) {\n      this._grainSize = this.toSeconds(size);\n\n      this._clock.frequency.setValueAtTime(this._playbackRate / this._grainSize, this.now());\n    }\n    /**\n     * The duration of the cross-fade between successive grains.\n     */\n\n  }, {\n    key: \"overlap\",\n    get: function get() {\n      return this._overlap;\n    },\n    set: function set(time) {\n      var computedTime = this.toSeconds(time);\n      assertRange(computedTime, 0);\n      this._overlap = computedTime;\n    }\n    /**\n     * If all the buffer is loaded\n     */\n\n  }, {\n    key: \"loaded\",\n    get: function get() {\n      return this.buffer.loaded;\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(GrainPlayer.prototype), \"dispose\", this).call(this);\n\n      this.buffer.dispose();\n\n      this._clock.dispose();\n\n      this._activeSources.forEach(function (source) {\n        return source.dispose();\n      });\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Source.getDefaults(), {\n        onload: noOp,\n        onerror: noOp,\n        overlap: 0.1,\n        grainSize: 0.2,\n        playbackRate: 1,\n        detune: 0,\n        loop: false,\n        loopStart: 0,\n        loopEnd: 0,\n        reverse: false\n      });\n    }\n  }]);\n\n  return GrainPlayer;\n}(Source);","map":null,"metadata":{},"sourceType":"module"}