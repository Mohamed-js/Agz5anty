{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { Effect } from \"./Effect\";\nimport { MidSideSplit } from \"../component/channel/MidSideSplit\";\nimport { MidSideMerge } from \"../component/channel/MidSideMerge\";\n/**\n * Mid/Side processing separates the the 'mid' signal\n * (which comes out of both the left and the right channel)\n * and the 'side' (which only comes out of the the side channels)\n * and effects them separately before being recombined.\n * Applies a Mid/Side seperation and recombination.\n * Algorithm found in [kvraudio forums](http://www.kvraudio.com/forum/viewtopic.php?t=212587).\n * This is a base-class for Mid/Side Effects.\n * @category Effect\n */\n\nexport var MidSideEffect = /*#__PURE__*/function (_Effect) {\n  _inherits(MidSideEffect, _Effect);\n\n  var _super = _createSuper(MidSideEffect);\n\n  function MidSideEffect(options) {\n    var _this;\n\n    _classCallCheck(this, MidSideEffect);\n\n    _this = _super.call(this, options);\n    _this.name = \"MidSideEffect\";\n    _this._midSideMerge = new MidSideMerge({\n      context: _this.context\n    });\n    _this._midSideSplit = new MidSideSplit({\n      context: _this.context\n    });\n    _this._midSend = _this._midSideSplit.mid;\n    _this._sideSend = _this._midSideSplit.side;\n    _this._midReturn = _this._midSideMerge.mid;\n    _this._sideReturn = _this._midSideMerge.side; // the connections\n\n    _this.effectSend.connect(_this._midSideSplit);\n\n    _this._midSideMerge.connect(_this.effectReturn);\n\n    return _this;\n  }\n  /**\n   * Connect the mid chain of the effect\n   */\n\n\n  _createClass(MidSideEffect, [{\n    key: \"connectEffectMid\",\n    value: function connectEffectMid() {\n      var _this$_midSend;\n\n      for (var _len = arguments.length, nodes = new Array(_len), _key = 0; _key < _len; _key++) {\n        nodes[_key] = arguments[_key];\n      }\n\n      (_this$_midSend = this._midSend).chain.apply(_this$_midSend, nodes.concat([this._midReturn]));\n    }\n    /**\n     * Connect the side chain of the effect\n     */\n\n  }, {\n    key: \"connectEffectSide\",\n    value: function connectEffectSide() {\n      var _this$_sideSend;\n\n      for (var _len2 = arguments.length, nodes = new Array(_len2), _key2 = 0; _key2 < _len2; _key2++) {\n        nodes[_key2] = arguments[_key2];\n      }\n\n      (_this$_sideSend = this._sideSend).chain.apply(_this$_sideSend, nodes.concat([this._sideReturn]));\n    }\n  }, {\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(MidSideEffect.prototype), \"dispose\", this).call(this);\n\n      this._midSideSplit.dispose();\n\n      this._midSideMerge.dispose();\n\n      this._midSend.dispose();\n\n      this._sideSend.dispose();\n\n      this._midReturn.dispose();\n\n      this._sideReturn.dispose();\n\n      return this;\n    }\n  }]);\n\n  return MidSideEffect;\n}(Effect);","map":null,"metadata":{},"sourceType":"module"}