{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { PhaseShiftAllpass } from \"../component/filter/PhaseShiftAllpass\";\nimport { optionsFromArguments } from \"../core/util/Defaults\";\nimport { Effect } from \"../effect/Effect\";\nimport { Add } from \"../signal/Add\";\nimport { Multiply } from \"../signal/Multiply\";\nimport { Negate } from \"../signal/Negate\";\nimport { Signal } from \"../signal/Signal\";\nimport { Oscillator } from \"../source/oscillator/Oscillator\";\nimport { ToneOscillatorNode } from \"../source/oscillator/ToneOscillatorNode\";\n/**\n * FrequencyShifter can be used to shift all frequencies of a signal by a fixed amount.\n * The amount can be changed at audio rate and the effect is applied in real time.\n * The frequency shifting is implemented with a technique called single side band modulation using a ring modulator.\n * Note: Contrary to pitch shifting, all frequencies are shifted by the same amount,\n * destroying the harmonic relationship between them. This leads to the classic ring modulator timbre distortion.\n * The algorithm will produces some aliasing towards the high end, especially if your source material\n * contains a lot of high frequencies. Unfortunatelly the webaudio API does not support resampling\n * buffers in real time, so it is not possible to fix it properly. Depending on the use case it might\n * be an option to low pass filter your input before frequency shifting it to get ride of the aliasing.\n * You can find a very detailed description of the algorithm here: https://larzeitlin.github.io/RMFS/\n *\n * @example\n * const input = new Tone.Oscillator(230, \"sawtooth\").start();\n * const shift = new Tone.FrequencyShifter(42).toDestination();\n * input.connect(shift);\n * @category Effect\n */\n\nexport var FrequencyShifter = /*#__PURE__*/function (_Effect) {\n  _inherits(FrequencyShifter, _Effect);\n\n  var _super = _createSuper(FrequencyShifter);\n\n  function FrequencyShifter() {\n    var _this;\n\n    _classCallCheck(this, FrequencyShifter);\n\n    _this = _super.call(this, optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]));\n    _this.name = \"FrequencyShifter\";\n    var options = optionsFromArguments(FrequencyShifter.getDefaults(), arguments, [\"frequency\"]);\n    _this.frequency = new Signal({\n      context: _this.context,\n      units: \"frequency\",\n      value: options.frequency,\n      minValue: -_this.context.sampleRate / 2,\n      maxValue: _this.context.sampleRate / 2\n    });\n    _this._sine = new ToneOscillatorNode({\n      context: _this.context,\n      type: \"sine\"\n    });\n    _this._cosine = new Oscillator({\n      context: _this.context,\n      phase: -90,\n      type: \"sine\"\n    });\n    _this._sineMultiply = new Multiply({\n      context: _this.context\n    });\n    _this._cosineMultiply = new Multiply({\n      context: _this.context\n    });\n    _this._negate = new Negate({\n      context: _this.context\n    });\n    _this._add = new Add({\n      context: _this.context\n    });\n    _this._phaseShifter = new PhaseShiftAllpass({\n      context: _this.context\n    });\n\n    _this.effectSend.connect(_this._phaseShifter); // connect the carrier frequency signal to the two oscillators\n\n\n    _this.frequency.fan(_this._sine.frequency, _this._cosine.frequency);\n\n    _this._phaseShifter.offset90.connect(_this._cosineMultiply);\n\n    _this._cosine.connect(_this._cosineMultiply.factor);\n\n    _this._phaseShifter.connect(_this._sineMultiply);\n\n    _this._sine.connect(_this._sineMultiply.factor);\n\n    _this._sineMultiply.connect(_this._negate);\n\n    _this._cosineMultiply.connect(_this._add);\n\n    _this._negate.connect(_this._add.addend);\n\n    _this._add.connect(_this.effectReturn); // start the oscillators at the same time\n\n\n    var now = _this.immediate();\n\n    _this._sine.start(now);\n\n    _this._cosine.start(now);\n\n    return _this;\n  }\n\n  _createClass(FrequencyShifter, [{\n    key: \"dispose\",\n    value: function dispose() {\n      _get(_getPrototypeOf(FrequencyShifter.prototype), \"dispose\", this).call(this);\n\n      this.frequency.dispose();\n\n      this._add.dispose();\n\n      this._cosine.dispose();\n\n      this._cosineMultiply.dispose();\n\n      this._negate.dispose();\n\n      this._phaseShifter.dispose();\n\n      this._sine.dispose();\n\n      this._sineMultiply.dispose();\n\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(Effect.getDefaults(), {\n        frequency: 0\n      });\n    }\n  }]);\n\n  return FrequencyShifter;\n}(Effect);","map":null,"metadata":{},"sourceType":"module"}