{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { CONTEXT_STORE } from '../globals';\nexport var createMinimalBaseAudioContextConstructor = function createMinimalBaseAudioContextConstructor(audioDestinationNodeConstructor, createAudioListener, eventTargetConstructor, isNativeOfflineAudioContext, unrenderedAudioWorkletNodeStore, wrapEventListener) {\n  return /*#__PURE__*/function (_eventTargetConstruct) {\n    _inherits(MinimalBaseAudioContext, _eventTargetConstruct);\n\n    var _super = _createSuper(MinimalBaseAudioContext);\n\n    function MinimalBaseAudioContext(_nativeContext, numberOfChannels) {\n      var _this;\n\n      _classCallCheck(this, MinimalBaseAudioContext);\n\n      _this = _super.call(this, _nativeContext);\n      _this._nativeContext = _nativeContext;\n      CONTEXT_STORE.set(_assertThisInitialized(_this), _nativeContext);\n\n      if (isNativeOfflineAudioContext(_nativeContext)) {\n        unrenderedAudioWorkletNodeStore.set(_nativeContext, new Set());\n      }\n\n      _this._destination = new audioDestinationNodeConstructor(_assertThisInitialized(_this), numberOfChannels);\n      _this._listener = createAudioListener(_assertThisInitialized(_this), _nativeContext);\n      _this._onstatechange = null;\n      return _this;\n    }\n\n    _createClass(MinimalBaseAudioContext, [{\n      key: \"currentTime\",\n      get: function get() {\n        return this._nativeContext.currentTime;\n      }\n    }, {\n      key: \"destination\",\n      get: function get() {\n        return this._destination;\n      }\n    }, {\n      key: \"listener\",\n      get: function get() {\n        return this._listener;\n      }\n    }, {\n      key: \"onstatechange\",\n      get: function get() {\n        return this._onstatechange;\n      },\n      set: function set(value) {\n        var wrappedListener = typeof value === 'function' ? wrapEventListener(this, value) : null;\n        this._nativeContext.onstatechange = wrappedListener;\n        var nativeOnStateChange = this._nativeContext.onstatechange;\n        this._onstatechange = nativeOnStateChange !== null && nativeOnStateChange === wrappedListener ? value : nativeOnStateChange;\n      }\n    }, {\n      key: \"sampleRate\",\n      get: function get() {\n        return this._nativeContext.sampleRate;\n      }\n    }, {\n      key: \"state\",\n      get: function get() {\n        return this._nativeContext.state;\n      }\n    }]);\n\n    return MinimalBaseAudioContext;\n  }(eventTargetConstructor);\n};","map":null,"metadata":{},"sourceType":"module"}