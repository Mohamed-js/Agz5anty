{"ast":null,"code":"function _typeof(obj) { \"@babel/helpers - typeof\"; if (typeof Symbol === \"function\" && typeof Symbol.iterator === \"symbol\") { _typeof = function _typeof(obj) { return typeof obj; }; } else { _typeof = function _typeof(obj) { return obj && typeof Symbol === \"function\" && obj.constructor === Symbol && obj !== Symbol.prototype ? \"symbol\" : typeof obj; }; } return _typeof(obj); }\n\nfunction _classCallCheck(instance, Constructor) { if (!(instance instanceof Constructor)) { throw new TypeError(\"Cannot call a class as a function\"); } }\n\nfunction _defineProperties(target, props) { for (var i = 0; i < props.length; i++) { var descriptor = props[i]; descriptor.enumerable = descriptor.enumerable || false; descriptor.configurable = true; if (\"value\" in descriptor) descriptor.writable = true; Object.defineProperty(target, descriptor.key, descriptor); } }\n\nfunction _createClass(Constructor, protoProps, staticProps) { if (protoProps) _defineProperties(Constructor.prototype, protoProps); if (staticProps) _defineProperties(Constructor, staticProps); return Constructor; }\n\nfunction _get(target, property, receiver) { if (typeof Reflect !== \"undefined\" && Reflect.get) { _get = Reflect.get; } else { _get = function _get(target, property, receiver) { var base = _superPropBase(target, property); if (!base) return; var desc = Object.getOwnPropertyDescriptor(base, property); if (desc.get) { return desc.get.call(receiver); } return desc.value; }; } return _get(target, property, receiver || target); }\n\nfunction _superPropBase(object, property) { while (!Object.prototype.hasOwnProperty.call(object, property)) { object = _getPrototypeOf(object); if (object === null) break; } return object; }\n\nfunction _inherits(subClass, superClass) { if (typeof superClass !== \"function\" && superClass !== null) { throw new TypeError(\"Super expression must either be null or a function\"); } subClass.prototype = Object.create(superClass && superClass.prototype, { constructor: { value: subClass, writable: true, configurable: true } }); if (superClass) _setPrototypeOf(subClass, superClass); }\n\nfunction _setPrototypeOf(o, p) { _setPrototypeOf = Object.setPrototypeOf || function _setPrototypeOf(o, p) { o.__proto__ = p; return o; }; return _setPrototypeOf(o, p); }\n\nfunction _createSuper(Derived) { var hasNativeReflectConstruct = _isNativeReflectConstruct(); return function _createSuperInternal() { var Super = _getPrototypeOf(Derived), result; if (hasNativeReflectConstruct) { var NewTarget = _getPrototypeOf(this).constructor; result = Reflect.construct(Super, arguments, NewTarget); } else { result = Super.apply(this, arguments); } return _possibleConstructorReturn(this, result); }; }\n\nfunction _possibleConstructorReturn(self, call) { if (call && (_typeof(call) === \"object\" || typeof call === \"function\")) { return call; } return _assertThisInitialized(self); }\n\nfunction _assertThisInitialized(self) { if (self === void 0) { throw new ReferenceError(\"this hasn't been initialised - super() hasn't been called\"); } return self; }\n\nfunction _isNativeReflectConstruct() { if (typeof Reflect === \"undefined\" || !Reflect.construct) return false; if (Reflect.construct.sham) return false; if (typeof Proxy === \"function\") return true; try { Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], function () {})); return true; } catch (e) { return false; } }\n\nfunction _getPrototypeOf(o) { _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf : function _getPrototypeOf(o) { return o.__proto__ || Object.getPrototypeOf(o); }; return _getPrototypeOf(o); }\n\nimport { Gain } from \"../../core/context/Gain\";\nimport { ToneAudioNode } from \"../../core/context/ToneAudioNode\";\nimport { optionsFromArguments } from \"../../core/util/Defaults\";\nimport { readOnly, writable } from \"../../core/util/Interface\";\nimport { MultibandSplit } from \"../channel/MultibandSplit\";\n/**\n * EQ3 provides 3 equalizer bins: Low/Mid/High.\n * @category Component\n */\n\nexport var EQ3 = /*#__PURE__*/function (_ToneAudioNode) {\n  _inherits(EQ3, _ToneAudioNode);\n\n  var _super = _createSuper(EQ3);\n\n  function EQ3() {\n    var _this;\n\n    _classCallCheck(this, EQ3);\n\n    _this = _super.call(this, optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]));\n    _this.name = \"EQ3\";\n    /**\n     * the output\n     */\n\n    _this.output = new Gain({\n      context: _this.context\n    });\n    _this._internalChannels = [];\n    var options = optionsFromArguments(EQ3.getDefaults(), arguments, [\"low\", \"mid\", \"high\"]);\n    _this.input = _this._multibandSplit = new MultibandSplit({\n      context: _this.context,\n      highFrequency: options.highFrequency,\n      lowFrequency: options.lowFrequency\n    });\n    _this._lowGain = new Gain({\n      context: _this.context,\n      gain: options.low,\n      units: \"decibels\"\n    });\n    _this._midGain = new Gain({\n      context: _this.context,\n      gain: options.mid,\n      units: \"decibels\"\n    });\n    _this._highGain = new Gain({\n      context: _this.context,\n      gain: options.high,\n      units: \"decibels\"\n    });\n    _this.low = _this._lowGain.gain;\n    _this.mid = _this._midGain.gain;\n    _this.high = _this._highGain.gain;\n    _this.Q = _this._multibandSplit.Q;\n    _this.lowFrequency = _this._multibandSplit.lowFrequency;\n    _this.highFrequency = _this._multibandSplit.highFrequency; // the frequency bands\n\n    _this._multibandSplit.low.chain(_this._lowGain, _this.output);\n\n    _this._multibandSplit.mid.chain(_this._midGain, _this.output);\n\n    _this._multibandSplit.high.chain(_this._highGain, _this.output);\n\n    readOnly(_assertThisInitialized(_this), [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n    _this._internalChannels = [_this._multibandSplit];\n    return _this;\n  }\n\n  _createClass(EQ3, [{\n    key: \"dispose\",\n    value:\n    /**\n     * Clean up.\n     */\n    function dispose() {\n      _get(_getPrototypeOf(EQ3.prototype), \"dispose\", this).call(this);\n\n      writable(this, [\"low\", \"mid\", \"high\", \"lowFrequency\", \"highFrequency\"]);\n\n      this._multibandSplit.dispose();\n\n      this.lowFrequency.dispose();\n      this.highFrequency.dispose();\n\n      this._lowGain.dispose();\n\n      this._midGain.dispose();\n\n      this._highGain.dispose();\n\n      this.low.dispose();\n      this.mid.dispose();\n      this.high.dispose();\n      this.Q.dispose();\n      return this;\n    }\n  }], [{\n    key: \"getDefaults\",\n    value: function getDefaults() {\n      return Object.assign(ToneAudioNode.getDefaults(), {\n        high: 0,\n        highFrequency: 2500,\n        low: 0,\n        lowFrequency: 400,\n        mid: 0\n      });\n    }\n  }]);\n\n  return EQ3;\n}(ToneAudioNode);","map":null,"metadata":{},"sourceType":"module"}